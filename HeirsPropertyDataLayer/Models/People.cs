using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.Common;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HeirsPropertyDataLayer.Models
{
    public class People
    {
            //give everything an organization ID of 0 no org //insert null
            /*
            public Guid PeopleID { get; set; }
            public Guid PersonID { get; set; }//Not Null //Do I need a get/set for this if these IDs are not being autogenerated but rather grabbed from previous autogen IDs
                                              //Changed the above to type Guid because it is generated as a Guid in sql thus coming into the c# program as a Guid
            public int OrganizationID { get; set; }//Null  
            public string PeopleType { get; set; }//Not Null  //Should this be an int or a string? In SQL it is under nvarchar, but should we make another table to store the various donation types and keep track of them through numbers?
            public decimal PeopleAmount { get; set; }//Null  
            public string PeopleDescription { get; set; }//Null  updat ppp for a person to enter a comment
            public DateTime PeopleDate { get; set; }//Null  
            public int DonorStatus { get; set; }//Null  //A donor status table still needs to be made.....?
            */

            public Guid PersonId { get; set; }//No Nulls Allowed
            public int SponsorType { get; set; }//Nulls Allowed
            public string Title { get; set; }//Nulls Allowed
            public string FirstName { get; set; }//Nulls Allowed
            public string MiddleName { get; set; }//Nulls Allowed
            public string LastName { get; set; }//Nulls Allowed
            public string PhoneNumber { get; set; }//Nulls Allowed





            public static People InsertPerson(People inPerson)
            {                                       


                People retPerson = inPerson;//this can't be changed as a parameter

                retPerson.PersonId = Guid.NewGuid();//Creates a new globally unique identifyer; I do not need to create a Guid ID for People bc it comes from the sql server? Actually I will need to create a Guid ID because a user will not be importing data already generated like I did which is why I created a GuidID on the sql side? Should we make this a feature. 

                ConnectionStringSettingsCollection settings = ConfigurationManager.ConnectionStrings;
                var stuff = ConfigurationManager.ConnectionStrings;
                //ConfigurationManager.ConnectionStrings.Clear();
                var otherstuff = ConfigurationManager.AppSettings.AllKeys;


                string constring = ConfigurationManager.ConnectionStrings["HeirsProperty.Properties.Settings.HPDatabase"].ConnectionString;//changed what's inside of the brackets from 0, in all areas in this class
                SqlConnection myConnection = new SqlConnection(constring);
                string sqlstring = $"INSERT INTO  PeopleTable (PersonID, SponsorType, Title, FirstName, MiddleName, LastName, PhoneNumber) VALUES('{inPerson.PersonId}',{inPerson.SponsorType},'{inPerson.Title}','{inPerson.FirstName}','{inPerson.MiddleName}','{inPerson.LastName}','{inPerson.PhoneNumber}')";
                                                                                                                                       //Instead of inPerson the above for PersonID may need to be retPerson?
                List<People> people = new List<People>();//new list of object People created
                People myPeople = new People();//serves as a placeholder for each donation?


                try
                {
                    //Event myretPerson = null;


                    SqlClientFactory dbFactory = (SqlClientFactory)DbProviderFactories.GetFactory("System.Data.SqlClient");
                    using (DbConnection dconnection = dbFactory.CreateConnection())
                    {
                        if (dconnection != null)//sucessful
                        {
                            dconnection.ConnectionString = constring;
                            dconnection.Open();
                            DbCommand myCommand = dconnection.CreateCommand();
                            myCommand.CommandText = sqlstring;
                            int myresp = myCommand.ExecuteNonQuery();//My response executes a SQL statement
                            {
                                if (myresp > 0)
                                {
                                    //xxxindividual id 
                                    //use donor id 
                                    //retPerson.PersonID = GetEventByName(inevent.EventName).EventID;//Is this line not needed bc we created the donationID as a Guid within the function? (OR) //Should I make a function like GetEventByName to be GetPeopleByPrice so that people can be looked up by price?
                                    return retPerson;
                                }
                                //            string sqlstring = $"SELECT EventID,EventName,EventPrice,EventDate,EventDateDetermination,EventCapacity FROM EventTable WHERE EventName='{inName}'";
                            }
                            //create a unique select
                        }
                    }
                    return null;

                }
                catch (Exception ex)
                {

                    //return false;
                    throw ex;
                    //return null;
                }


            }

            public static List<People> SelectAll()//Haven't started making changes to the below
            {
                //Read
                // returns  ALL people from the PeopleTable regardless of criteria
                string constring = ConfigurationManager.ConnectionStrings["HeirsProperty.Properties.Settings.HPDatabase"].ConnectionString;
                SqlConnection myConnection = new SqlConnection(constring);

              //string sqlstring = $"INSERT INTO  PeopleTable (PersonID, SponsorType, Title, FirstName, MiddleName, LastName, PhoneNumber) VALUES('{inPerson.PersonId}',{inPerson.SponsorType},'{inPerson.Title}',{inPerson.FirstName},'{inPerson.MiddleName}','{inPerson.LastName}',{inPerson.PhoneNumber})";

                string sqlstring = "SELECT PersonID, SponsorType, Title, FirstName, MiddleName, LastName, PhoneNumber FROM PeopleTable ORDER BY PersonID";

                //string sqlstring = "SELECT EventID,EventName,EventPrice,EventDate,EventDateDetermination,EventCapacity FROM EventTable ORDER BY EventID";
                List<People> people = new List<People>();//stores a list that stuff can be added to


                People mySinglePerson = new People();
                List<People> myretPeople = null;//lets me know if there is nothing in a list


                try
                {

                    SqlClientFactory dbFactory = (SqlClientFactory)DbProviderFactories.GetFactory("System.Data.SqlClient");//Turning regular database to a MicrosofSQLClient database (MS SQL Database); Casts SqlClientFactory and takes in "Microsoft.Data.SqlClient"
                    using (DbConnection dconnection = dbFactory.CreateConnection())//createConection is a property from SQLClientFactory
                    {
                        if (dconnection != null)//if I was able to make a database; Connection sucssessful
                        {
                            dconnection.ConnectionString = constring;//ConnectionString is a property
                            dconnection.Open();
                            DbCommand myCommand = dconnection.CreateCommand();
                            myCommand.CommandText = sqlstring;//The select command; sqlstring sets your query
                            using (DbDataReader myReader = myCommand.ExecuteReader())//make a new reader by executing a command
                            {


                                while (myReader.Read())
                                {

                                  mySinglePerson = new People();
                                  mySinglePerson.PersonId = new Guid(myReader["PersonID"].ToString());//takes in string then turns new guid into a value into the thing that comes out
                                  //mySinglePerson.SponsorType = int.Parse(myReader["SponsorType"].ToString());
                                  if (myReader.IsDBNull(1))//each row is coming through;IsDBNull at position 5 which corresponds to capacity set to -1
                                  {
                                    mySinglePerson.SponsorType = -1;
                                  }
                                  else
                                  {
                                    mySinglePerson.SponsorType = int.Parse(myReader["SponsorType"].ToString());
                                    //it may not come back as an int, but rather a string
                                  }
                                  mySinglePerson.Title = myReader["Title"].ToString();
                                  mySinglePerson.FirstName = myReader["FirstName"].ToString();
                                  mySinglePerson.MiddleName = myReader["MiddleName"].ToString();
                                  mySinglePerson.LastName = myReader["LastName"].ToString();
                                  mySinglePerson.PhoneNumber = myReader["PhoneNumber"].ToString();


                                  people.Add(mySinglePerson);//add to list of people

                                }

                                if (people != null && people.Count > 0)
                                {

                                    myretPeople = people;//sets myretPeople = people so your list can be returned
                                }

                            }
                        }
                    }


                    return myretPeople;//if nothing is added returns to null

                }
                catch (Exception ex)
                {

                    throw ex;
                    //return null;
                }




            }

            public static People Select(Guid inPersonID)
            {

                People retPerson = new People();
                string constring = ConfigurationManager.ConnectionStrings["HeirsProperty.Properties.Settings.HPDatabase"].ConnectionString;
                SqlConnection myConnection = new SqlConnection(constring);

                string sqlstring = $"SELECT PersonID, SponsorType, Title, FirstName, MiddleName, LastName, PhoneNumber FROM PeopleTable WHERE PersonID='{inPersonID}'";//inPersonID is surrounded by single quotes bc it is of type GUID

                //string sqlstring = $"SELECT EventID,EventName,EventPrice,EventDate,EventDateDetermination,EventCapacity FROM EventTable WHERE EventID='{inEventID}'";
                List<People> people = new List<People>();
                People mySinglePerson = new People();



                try
                {
                    People myretPerson = null;


                    SqlClientFactory dbFactory = (SqlClientFactory)DbProviderFactories.GetFactory("System.Data.SqlClient");
                    using (DbConnection dconnection = dbFactory.CreateConnection())
                    {
                        if (dconnection != null)
                        {
                            dconnection.ConnectionString = constring;
                            dconnection.Open();
                            DbCommand myCommand = dconnection.CreateCommand();
                            myCommand.CommandText = sqlstring;
                            using (DbDataReader myReader = myCommand.ExecuteReader())
                            {
                                //string sqlstring = $"SELECT PeopleID, PersonID, OrganizationID, PeopleType, PeopleAmount, PeopleDescription, PeopleDate, DonorStatus FROM PeopleTable WHERE PeopleID='{inPersonID}'";

                                while (myReader.Read())
                                {
                                   
                                  mySinglePerson = new People();
                                  mySinglePerson.PersonId = new Guid(myReader["PersonID"].ToString());//takes in string then turns new guid into a value into the thing that comes out
                                  mySinglePerson.SponsorType = int.Parse(myReader["SponsorType"].ToString());
                                  mySinglePerson.Title = myReader["Title"].ToString();
                                  mySinglePerson.FirstName = myReader["FirstName"].ToString();
                                  mySinglePerson.MiddleName = myReader["MiddleName"].ToString();
                                  mySinglePerson.LastName = myReader["LastName"].ToString();
                                  mySinglePerson.PhoneNumber = myReader["PhoneNumber"].ToString();

                                  /*if (myReader.IsDBNull(5))
                                  {
                                      myTopEvent.EventCapacity = -1;
                                  }
                                  else
                                  {
                                      myTopEvent.EventCapacity = int.Parse(myReader["EventCapacity"].ToString());
                                  }
                                  myTopEvent.EventDateDetermination = int.Parse(myReader["EventDateDetermination"].ToString());*/

                                people.Add(mySinglePerson);

                                    if (people != null && people.Count > 0)
                                    {

                                        myretPerson = people[0];

                                    }
                                }
                            }
                        }
                    }


                    return myretPerson;
                }
                catch (Exception ex)
                {

                    throw ex;
                    //return null;
                }


                //      return retPerson;

            }

            public static bool UpdatePerson(People inPerson)
            {

                string constring = ConfigurationManager.ConnectionStrings["HeirsProperty.Properties.Settings.HPDatabase"].ConnectionString;
                SqlConnection myConnection = new SqlConnection(constring);

                //string sqlstring = $"INSERT INTO  PeopleTable (PersonID, SponsorType, Title, FirstName, MiddleName, LastName, PhoneNumber) VALUES('{inPerson.PersonId}',{inPerson.SponsorType},'{inPerson.Title}',{inPerson.FirstName},'{inPerson.MiddleName}','{inPerson.LastName}',{inPerson.PhoneNumber})";


                string sqlstring = $"UPDATE PeopleTable SET PersonID='{inPerson.PersonId}', SponsorType={inPerson.SponsorType}, Title='{inPerson.Title}', FirstName='{inPerson.FirstName}', MiddleName='{inPerson.MiddleName}', LastName='{inPerson.LastName}', PhoneNumber='{inPerson.PhoneNumber}' FROM PeopleTable WHERE PersonID='{inPerson.PersonId}'";

                //string sqlstring = $"UPDATE EventTable (SET EventName={inevent.EventName},EventPrice={inevent.EventPrice},EventDate={inevent.EventDate},EventDateDetermination={inevent.EventDateDetermination},EventCapacity={inevent.EventCapacity} FROM EventTable WHERE EventID={inevent.EventID}";


                try
                {


                    SqlClientFactory dbFactory = (SqlClientFactory)DbProviderFactories.GetFactory("System.Data.SqlClient");
                    using (DbConnection dconnection = dbFactory.CreateConnection())
                    {
                        if (dconnection != null)
                        {
                            dconnection.ConnectionString = constring;
                            dconnection.Open();
                            DbCommand myCommand = dconnection.CreateCommand();
                            myCommand.CommandText = sqlstring;
                            int myresp = myCommand.ExecuteNonQuery();///myresp what is the databases response to my command/we know we are not getting back a bunch of rows; contains the number of rows affected which should be 1 row
                            {
                                if (myresp > 0)//should return 1
                                {
                                    return true;
                                }
                                //            string sqlstring = $"SELECT EventID,EventName,EventPrice,EventDate,EventDateDetermination,EventCapacity FROM EventTable WHERE EventName='{inName}'";
                            }
                        }
                    }
                    return false;

                }
                catch (Exception ex)
                {

                    //return false;
                    throw ex;
                    //return null;
                }
                //Takes in an event object and then updates the row on the table that has the same EventID



            }

            public static bool DeletePerson(Guid inPersonID)
            {

                string constring = ConfigurationManager.ConnectionStrings["HeirsProperty.Properties.Settings.HPDatabase"].ConnectionString;
                SqlConnection myConnection = new SqlConnection(constring);
                string sqlstring = $"DELETE FROM PeopleTable WHERE PersonID='{inPersonID}'";



                try
                {

                    SqlClientFactory dbFactory = (SqlClientFactory)DbProviderFactories.GetFactory("System.Data.SqlClient");
                    using (DbConnection dconnection = dbFactory.CreateConnection())
                    {
                        if (dconnection != null)//successful
                        {
                            dconnection.ConnectionString = constring;
                            dconnection.Open();
                            DbCommand myCommand = dconnection.CreateCommand();
                            myCommand.CommandText = sqlstring;
                            int myresp = myCommand.ExecuteNonQuery();
                            {
                                if (myresp > 0)//Does 0 represent nothing chosen to be deleted?
                                {
                                    return true;
                                }

                                //            string sqlstring = $"SELECT PeopleID, PersonID, OrganizationID, PeopleType, PeopleAmount, PeopleDescription, PeopleDate, DonorStatus FROM PeopleTable WHERE PeopleID='{inPersonID}'";

                            }
                        }
                    }
                    return false;

                }
                catch (Exception ex)
                {

                    //return false;
                    throw ex;
                    //return null;
                }
                //Takes in an donation object and then updates the row on the table that has the same PeopleID


                return false;
            }


        
    }

}

