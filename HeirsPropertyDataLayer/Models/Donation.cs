using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.Common;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


namespace HeirsPropertyDataLayer.Models
{
    class Donation
    {
        //give everything an organization ID of 0 no org //insert null

        public Guid DonationID { get; set; }
        public int IndividualID { get; set; }//Not Null //Do I need a get/set for this if these IDs are not being autogenerated but rather grabbed from previous autogen IDs
        public int OrganizationID { get; set; }//Null  
        public string DonationType { get; set; }//Not Null  //Should this be an int or a string? In SQL it is under nvarchar, but should we make another table to store the various donation types and keep track of them through numbers?
        public decimal DonationAmount { get; set; }//Null  
        public string DonationDescription { get; set; }//Null  updat ppp for a person to enter a comment
        public DateTime DonationDate { get; set; }//Null  
        public int DonorStatus { get; set; }//Null  //A donor status table still needs to be made.....

        public static Donation InsertDonation(Donation inDonation)//A donation is made and come in from the business logic page //this has everything but the id?
        {
            //Create            //There is no donation ID so this does not need to be retrieved (On PPP, Donor is selected from a combo box; This must be done (Not Null) to submit a donation)
            //This function allows a donation to be inputted and associates it with an individual and possibly company the individual is affiliated with
            //We need to figure out how to connnect the donation with the IndividualID and/or CompanyID

            //Following the above logic, an invitee needs to be created before a donation is created otherwise there will not be an IndividualID to associate the donation with?


            Donation retDonation = inDonation;//this can't be changed as a parameter

            retDonation.DonationID = Guid.NewGuid();//Creates a new globally unique identifyer

            string constring = ConfigurationManager.ConnectionStrings[0].ConnectionString;
            SqlConnection myConnection = new SqlConnection(constring);
            string sqlstring = $"INSERT INTO  DonationTable  (DonationID, IndividualID, OrganizationID, DonationType, DonationAmount, DonationDescription, DonationDate, DonorStatus) VALUES({retDonation.DonationID},{inDonation.IndividualID},{inDonation.OrganizationID},{inDonation.DonationType},{inDonation.DonationAmount},{inDonation.DonationDescription},{inDonation.DonationDate},{inDonation.DonorStatus})";
                                                              //Not Null,   Not Null,     Nullable
            List<Donation> donations = new List<Donation>();//new list of object Donation created
            Donation myDonation = new Donation();//serves as a placeholder for each donation?


            try
            {
                //Event myretDonation = null;


                SqlClientFactory dbFactory = (SqlClientFactory)DbProviderFactories.GetFactory("Microsoft.Data.SqlClient");
                using (DbConnection dconnection = dbFactory.CreateConnection())
                {
                    if (dconnection != null)//sucessful
                    {
                        dconnection.ConnectionString = constring;
                        dconnection.Open();
                        DbCommand myCommand = dconnection.CreateCommand();
                        myCommand.CommandText = sqlstring;
                        int myresp = myCommand.ExecuteNonQuery();//My response executes a SQL statement
                        {
                           if (myresp > 0)
                            {
                                //xxxindividual id 
                                //use donor id 
                                //retDonation.IndividualID = GetEventByName(inevent.EventName).EventID;//Is this line not needed bc we created the donationID as a Guid within the function? (OR) //Should I make a function like GetEventByName to be GetDonationByPrice so that donations can be looked up by price?
                                return retDonation;
                            }
                            //            string sqlstring = $"SELECT EventID,EventName,EventPrice,EventDate,EventDateDetermination,EventCapacity FROM EventTable WHERE EventName='{inName}'";
                        }
                        //create a unique select
                    }
                }
                return null;

            }
            catch (Exception ex)
            {

                //return false;
                throw ex;
                //return null;
            }


        }

        public static List<Donation> SelectAll()//Haven't started making changes to the below
        {
            //Read
            // returns  ALL donations from the DonationTable regardless of criteria
            string constring = ConfigurationManager.ConnectionStrings[0].ConnectionString;
            SqlConnection myConnection = new SqlConnection(constring);

            string sqlstring = "SELECT DonationID, IndividualID, OrganizationID, DonationType, DonationAmount, DonationDescription, DonationDate, DonorStatus FROM DonationTable ORDER BY DonationID";
          
            //string sqlstring = "SELECT EventID,EventName,EventPrice,EventDate,EventDateDetermination,EventCapacity FROM EventTable ORDER BY EventID";
            List<Donation> donations = new List<Donation>();//stores a list that stuff can be added to
            
            
            Donation mySingleDonation = new Donation();
            List<Donation> myretDonations = null;//lets me know if there is nothing in a list



            try
            {

                SqlClientFactory dbFactory = (SqlClientFactory)DbProviderFactories.GetFactory("Microsoft.Data.SqlClient");//Turning regular database to a MicrosofSQLClient database (MS SQL Database); Casts SqlClientFactory and takes in "Microsoft.Data.SqlClient"
                using (DbConnection dconnection = dbFactory.CreateConnection())//createConection is a property from SQLClientFactory
                {
                    if (dconnection != null)//if I was able to make a database; Connection sucssessful
                    {
                        dconnection.ConnectionString = constring;//ConnectionString is a property
                        dconnection.Open();
                        DbCommand myCommand = dconnection.CreateCommand();
                        myCommand.CommandText = sqlstring;//The select command; sqlstring sets your query
                        using (DbDataReader myReader = myCommand.ExecuteReader())//make a new reader by executing a command
                        {
                            //            string sqlstring = $"SELECT DonationID, IndividualID, OrganizationID, DonationType, DonationAmount, DonationDescription, DonationDate, DonorStatus FROM DonationTable ORDER BY DonationID; //Do I want to order by DonationID?
                                                              

                            while (myReader.Read())
                            {
                                mySingleDonation = new Donation();
                                mySingleDonation.DonationID = new Guid(myReader["DonationID"].ToString());//takes in string then turns new guid into a value into the thing that comes out
                                mySingleDonation.IndividualID = int.Parse(myReader["IndividualID"].ToString());
                                mySingleDonation.OrganizationID = int.Parse(myReader["OrganizationID"].ToString());
                                mySingleDonation.DonationType = myReader["DonationType"].ToString();
                                mySingleDonation.DonationAmount = Decimal.Parse(myReader["DonationAmount"].ToString());
                                mySingleDonation.DonationDescription = myReader["DonationDescription"].ToString();
                                mySingleDonation.DonationDate = DateTime.Parse(myReader["DonationDate"].ToString());
                                mySingleDonation.DonorStatus = int.Parse(myReader["DonorStatus"].ToString());

                                /*if (myReader.IsDBNull(2))//each row is coming through;IsDBNull at position 5 which corresponds to capacity set to -1
                                {
                                    mySingleDonation.OrganizationID = -1;
                                }
                                else
                                {
                                    mySingleDonation.OrganizationID = int.Parse(myReader["OrganizationID"].ToString());//it may not come back as an int, but rather a string
                                }*/

                                donations.Add(mySingleDonation);//add to list of donations
                            }

                            if (donations != null && donations.Count > 0)
                            {

                                myretDonations = donations;//sets myretDonations = donations so your list can be returned
                            }

                        }
                    }
                }


                return myretDonations;//if nothing is added returns to null

            }
            catch (Exception ex)
            {

                throw ex;
                //return null;
            }




        }

        public static Donation Select(int inDonationID)
        {

            Donation retDonation = new Donation();
            string constring = ConfigurationManager.ConnectionStrings[0].ConnectionString;
            SqlConnection myConnection = new SqlConnection(constring);

            string sqlstring = $"SELECT DonationID, IndividualID, OrganizationID, DonationType, DonationAmount, DonationDescription, DonationDate, DonorStatus FROM DonationTable WHERE DonationID='{inDonationID}'";

            //string sqlstring = $"SELECT EventID,EventName,EventPrice,EventDate,EventDateDetermination,EventCapacity FROM EventTable WHERE EventID='{inEventID}'";
            List<Donation> donations = new List<Donation>();
            Donation mySingleDonation = new Donation();



            try
            {
                Donation myretDonation = null;


                SqlClientFactory dbFactory = (SqlClientFactory)DbProviderFactories.GetFactory("Microsoft.Data.SqlClient");
                using (DbConnection dconnection = dbFactory.CreateConnection())
                {
                    if (dconnection != null)
                    {
                        dconnection.ConnectionString = constring;
                        dconnection.Open();
                        DbCommand myCommand = dconnection.CreateCommand();
                        myCommand.CommandText = sqlstring;
                        using (DbDataReader myReader = myCommand.ExecuteReader())
                        {
                            //string sqlstring = $"SELECT DonationID, IndividualID, OrganizationID, DonationType, DonationAmount, DonationDescription, DonationDate, DonorStatus FROM DonationTable WHERE DonationID='{inDonationID}'";

                            while (myReader.Read())
                            {
                                mySingleDonation = new Donation();
                                mySingleDonation.DonationID = new Guid(myReader["DonationID"].ToString());//takes in string then turns new guid into a value into the thing that comes out
                                mySingleDonation.IndividualID = int.Parse(myReader["IndividualID"].ToString());
                                mySingleDonation.OrganizationID = int.Parse(myReader["OrganizationID"].ToString());
                                mySingleDonation.DonationType = myReader["DonationType"].ToString();
                                mySingleDonation.DonationAmount = Decimal.Parse(myReader["DonationAmount"].ToString());
                                mySingleDonation.DonationDescription = myReader["DonationDescription"].ToString();
                                mySingleDonation.DonationDate = DateTime.Parse(myReader["DonationDate"].ToString());
                                mySingleDonation.DonorStatus = int.Parse(myReader["DonorStatus"].ToString());

                                /*if (myReader.IsDBNull(5))
                                {
                                    myTopEvent.EventCapacity = -1;
                                }
                                else
                                {
                                    myTopEvent.EventCapacity = int.Parse(myReader["EventCapacity"].ToString());
                                }
                                myTopEvent.EventDateDetermination = int.Parse(myReader["EventDateDetermination"].ToString());*/

                                donations.Add(mySingleDonation);

                                if (donations != null && donations.Count > 0)
                                {

                                    myretDonation = donations[0];

                                }
                            }
                        }
                    }
                }


                return myretDonation;
            }
            catch (Exception ex)
            {

                throw ex;
                //return null;
            }


            //      return retDonation;

        }

        public static bool UpdateDonationt(Donation inDonation)
        {

            string constring = ConfigurationManager.ConnectionStrings[0].ConnectionString;
            SqlConnection myConnection = new SqlConnection(constring);

            string sqlstring = $"UPDATE DonationTable  (SET DonationID={inDonation.DonationID}, IndividualID={inDonation.IndividualID}, OrganizationID={inDonation.OrganizationID}, DonationType={inDonation.DonationType}, DonationAmount={inDonation.DonationAmount}, DonationDescription={inDonation.DonationDescription}, DonationDate={inDonation.DonationDate}, DonorStatus={inDonation.DonorStatus}) FROM DonationTable WHERE DonationID={inDonation.DonationID}";
                                                                        //Should the above be retDonation.DonationID or no bc it comes in from the insert as retDonation and does not need to be intialized againg bc the GUID is created in the Insert Function?
            //string sqlstring = $"UPDATE EventTable (SET EventName={inevent.EventName},EventPrice={inevent.EventPrice},EventDate={inevent.EventDate},EventDateDetermination={inevent.EventDateDetermination},EventCapacity={inevent.EventCapacity} FROM EventTable WHERE EventID={inevent.EventID}";
           

            try
            {


                SqlClientFactory dbFactory = (SqlClientFactory)DbProviderFactories.GetFactory("Microsoft.Data.SqlClient");
                using (DbConnection dconnection = dbFactory.CreateConnection())
                {
                    if (dconnection != null)
                    {
                        dconnection.ConnectionString = constring;
                        dconnection.Open();
                        DbCommand myCommand = dconnection.CreateCommand();
                        myCommand.CommandText = sqlstring;
                        int myresp = myCommand.ExecuteNonQuery();///myresp what is the databases response to my command/we know we are not getting back a bunch of rows; contains the number of rows affected which should be 1 row
                        {
                            if (myresp > 0)//should return 1
                            {
                                return true;
                            }
                            //            string sqlstring = $"SELECT EventID,EventName,EventPrice,EventDate,EventDateDetermination,EventCapacity FROM EventTable WHERE EventName='{inName}'";
                        }
                    }
                }
                return false;

            }
            catch (Exception ex)
            {

                //return false;
                throw ex;
                //return null;
            }
            //Takes in an event object and then updates the row on the table that has the same EventID



        }

        public static bool DeleteDonation(int inDonationID)
        {

            string constring = ConfigurationManager.ConnectionStrings[0].ConnectionString;
            SqlConnection myConnection = new SqlConnection(constring);
            string sqlstring = $"DELETE FROM DonationTable WHERE DonationID={inDonationID}";



            try
            {

                SqlClientFactory dbFactory = (SqlClientFactory)DbProviderFactories.GetFactory("Microsoft.Data.SqlClient");
                using (DbConnection dconnection = dbFactory.CreateConnection())
                {
                    if (dconnection != null)//successful
                    {
                        dconnection.ConnectionString = constring;
                        dconnection.Open();
                        DbCommand myCommand = dconnection.CreateCommand();
                        myCommand.CommandText = sqlstring;
                        int myresp = myCommand.ExecuteNonQuery();
                        {
                            if (myresp > 0)//Does 0 represent nothing chosen to be deleted?
                            {
                                return true;
                            }

                            //            string sqlstring = $"SELECT DonationID, IndividualID, OrganizationID, DonationType, DonationAmount, DonationDescription, DonationDate, DonorStatus FROM DonationTable WHERE DonationID='{inDonationID}'";

                        }
                    }
                }
                return false;

            }
            catch (Exception ex)
            {

                //return false;
                throw ex;
                //return null;
            }
            //Takes in an donation object and then updates the row on the table that has the same DonationID


            return false;
        }


    }
}



    

