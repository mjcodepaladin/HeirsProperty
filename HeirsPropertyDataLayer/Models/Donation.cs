using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.Common;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


namespace HeirsPropertyDataLayer.Models
{
    class Donation
    {
        //give everything an organization ID of 0 no org //insert null

        public Guid DonationID { get; set; }
        public int IndividualID { get; set; }//Not Null //Do I need a get/set for this if these IDs are not being autogenerated but rather grabbed from previous autogen IDs
        public int OrganizationID { get; set; }//Null  //Same ? as above
        public string DonationType { get; set; }//Not Null  //Should this be an int or a string? In SQL it is under nvarchar, but should we make another table to store the various donation types and keep track of them through numbers?
        public decimal DonationAmount { get; set; }//Null  
        public string DonationDescription { get; set; }//Null  updat ppp for a person to enter a comment
        public DateTime DonationDate { get; set; }//Null  
        public int DonorStatus { get; set; }//Null  //A donor status table still needs to be made.....

        //Make add (insert) and select all (DONATION TABLE) functions
        public static Donation InsertDonation(Donation inDonation)//A donation is made and come in from the business logic page //this has everything but the id?
        {
            //Create            //There is no donation ID so this does not need to be retrieved (On PPP, Donor is selected from a combo box; This must be done (Not Null) to submit a donation)
            //This function allows a donation to be inputted and associates it with an individual and possibly company the individual is affiliated with
            //We need to figure out how to connnect the donation with the IndividualID and/or CompanyID

            //Following the above logic, an invitee needs to be created before a donation is created otherwise there will not be an IndividualID to associate the donation with?


            Donation retDonation = inDonation;//this can't be changed as a parameter

            retDonation.DonationID = Guid.NewGuid();//Creates a new globally unique identifyer

            string constring = ConfigurationManager.ConnectionStrings[0].ConnectionString;
            SqlConnection myConnection = new SqlConnection(constring);
            string sqlstring = $"INSERT INTO  DonationTable  (DonationID, IndividualID, OrganizationID, DonationType, DonationAmount, DonationDescription, DonationDate, DonorStatus) VALUES({retDonation.DonationID},{inDonation.IndividualID},{inDonation.OrganizationID},{inDonation.DonationType},{inDonation.DonationAmount},{inDonation.DonationDescription},{inDonation.DonationDate},{inDonation.DonorStatus})";
                                                              //Not Null,   Not Null,     Nullable
            List<Donation> donations = new List<Donation>();//new list of object Donation created
            Donation myDonation = new Donation();//serves as a placeholder for each donation?


            try
            {
                //Event myretDonation = null;


                SqlClientFactory dbFactory = (SqlClientFactory)DbProviderFactories.GetFactory("Microsoft.Data.SqlClient");
                using (DbConnection dconnection = dbFactory.CreateConnection())
                {
                    if (dconnection != null)//sucessful
                    {
                        dconnection.ConnectionString = constring;
                        dconnection.Open();
                        DbCommand myCommand = dconnection.CreateCommand();
                        myCommand.CommandText = sqlstring;
                        int myresp = myCommand.ExecuteNonQuery();//My response executes a SQL statement
                        {
                           if (myresp > 0)
                            {
                                //xxxindividual id 
                                //use donor id 
                                //retDonation.IndividualID = GetEventByName(inevent.EventName).EventID;//Is this line not needed bc we created the donationID as a Guid within the function? (OR) //Should I make a function like GetEventByName to be GetDonationByPrice so that donations can be looked up by price?
                                return retDonation;
                            }
                            //            string sqlstring = $"SELECT EventID,EventName,EventPrice,EventDate,EventDateDetermination,EventCapacity FROM EventTable WHERE EventName='{inName}'";
                        }
                        //create a unique select
                    }
                }
                return null;

            }
            catch (Exception ex)
            {

                //return false;
                throw ex;
                //return null;
            }

            //What should be done with Organization ID? Will this be figured out later for commercial release?
            //A person can donate on behalf of a company or however many people who belong to a company and donates will be tallied?

        }

        public static List<Donation> SelectAll()//Haven't started making changes to the below
        {
            //Read
            // returns  ALL donations from the DonationTable regardless of criteria
            string constring = ConfigurationManager.ConnectionStrings[0].ConnectionString;
            SqlConnection myConnection = new SqlConnection(constring);

            string sqlstring = "SELECT DonationID, IndividualID, OrganizationID, DonationType, DonationAmount, DonationDescription, DonationDate, DonorStatus FROM DonationTable ORDER BY DonationID";
          
            //string sqlstring = "SELECT EventID,EventName,EventPrice,EventDate,EventDateDetermination,EventCapacity FROM EventTable ORDER BY EventID";
            List<Donation> donations = new List<Donation>();//stores a list that stuff can be added to
            
            
            Donation mySingleDonation = new Donation();
            List<Donation> myretDonations = null;//lets me know if there is nothing in a list



            try
            {

                SqlClientFactory dbFactory = (SqlClientFactory)DbProviderFactories.GetFactory("Microsoft.Data.SqlClient");//Turning regular database to a MicrosofSQLClient database (MS SQL Database); Casts SqlClientFactory and takes in "Microsoft.Data.SqlClient"
                using (DbConnection dconnection = dbFactory.CreateConnection())//createConection is a property from SQLClientFactory
                {
                    if (dconnection != null)//if I was able to make a database; Connection sucssessful
                    {
                        dconnection.ConnectionString = constring;//ConnectionString is a property
                        dconnection.Open();
                        DbCommand myCommand = dconnection.CreateCommand();
                        myCommand.CommandText = sqlstring;//The select command; sqlstring sets your query
                        using (DbDataReader myReader = myCommand.ExecuteReader())//make a new reader by executing a command
                        {
                            //            string sqlstring = $"SELECT DonationID, IndividualID, OrganizationID, DonationType, DonationAmount, DonationDescription, DonationDate, DonorStatus FROM DonationTable ORDER BY DonationID; //Do I want to order by DonationID?
                                                              

                            while (myReader.Read())
                            {
                                mySingleDonation = new Donation();
                                mySingleDonation.DonationID = new Guid(myReader["DonationID"].ToString());//takes in string then turns new guid into a value into the thing that comes out
                                mySingleDonation.IndividualID = int.Parse(myReader["IndividualID"].ToString());
                                mySingleDonation.OrganizationID = int.Parse(myReader["OrganizationID"].ToString());
                                mySingleDonation.DonationType = myReader["DonationType"].ToString();//DonationType nvarchar not int? Don't understand red underline
                                mySingleDonation.DonationAmount = Decimal.Parse(myReader["DonationAmount"].ToString());
                                mySingleDonation.DonationDescription = myReader["DonationDescription"].ToString();
                                mySingleDonation.DonationDate = DateTime.Parse(myReader["DonationDate"].ToString());
                                mySingleDonation.DonorStatus = int.Parse(myReader["DonorStatus"].ToString());

                                /*if (myReader.IsDBNull(2))//each row is coming through;IsDBNull at position 5 which corresponds to capacity set to -1
                                {
                                    mySingleDonation.OrganizationID = -1;
                                }
                                else
                                {
                                    mySingleDonation.OrganizationID = int.Parse(myReader["OrganizationID"].ToString());//it may not come back as an int, but rather a string
                                }*/

                                donations.Add(mySingleDonation);//add to list of donations
                            }

                            if (donations != null && donations.Count > 0)
                            {

                                myretDonations = donations;//sets myretDonations = donations so your list can be returned
                            }

                        }
                    }
                }


                return myretDonations;//if nothing is added returns to null

            }
            catch (Exception ex)
            {

                throw ex;
                //return null;
            }




        }


    }
}
